keyword class
identifier Main
symbol {
keyword function
keyword void
identifier main
symbol (
symbol )
symbol {
keyword var
keyword int
identifier result
symbol ,
identifier value
symbol ;
keyword do
identifier Main
symbol .
identifier fillMemory
symbol (
integerConstant 8001
symbol ,
integerConstant 16
symbol ,
symbol -
integerConstant 1
symbol )
symbol ;
keyword let
identifier value
symbol =
identifier Memory
symbol .
identifier peek
symbol (
integerConstant 8000
symbol )
symbol ;
keyword do
identifier Main
symbol .
identifier convert
symbol (
identifier value
symbol )
symbol ;
keyword return
symbol ;
symbol }
keyword function
keyword void
identifier convert
symbol (
keyword int
identifier value
symbol )
symbol {
keyword var
keyword int
identifier mask
symbol ,
identifier position
symbol ;
keyword var
keyword boolean
identifier loop
symbol ;
keyword let
identifier loop
symbol =
keyword true
symbol ;
keyword while
symbol (
identifier loop
symbol )
symbol {
keyword let
identifier position
symbol =
identifier position
symbol +
integerConstant 1
symbol ;
keyword let
identifier mask
symbol =
identifier Main
symbol .
identifier nextMask
symbol (
identifier mask
symbol )
symbol ;
keyword do
identifier Memory
symbol .
identifier poke
symbol (
integerConstant 9000
symbol +
identifier position
symbol ,
identifier mask
symbol )
symbol ;
keyword if
symbol (
symbol ~
symbol (
identifier position
symbol >
integerConstant 16
symbol )
symbol )
symbol {
keyword if
symbol (
symbol ~
symbol (
symbol (
identifier value
symbol &
identifier mask
symbol )
symbol =
integerConstant 0
symbol )
symbol )
symbol {
keyword do
identifier Memory
symbol .
identifier poke
symbol (
integerConstant 8000
symbol +
identifier position
symbol ,
integerConstant 1
symbol )
symbol ;
symbol }
keyword else
symbol {
keyword do
identifier Memory
symbol .
identifier poke
symbol (
integerConstant 8000
symbol +
identifier position
symbol ,
integerConstant 0
symbol )
symbol ;
symbol }
symbol }
keyword else
symbol {
keyword let
identifier loop
symbol =
keyword false
symbol ;
symbol }
symbol }
keyword return
symbol ;
symbol }
keyword function
keyword int
identifier nextMask
symbol (
keyword int
identifier mask
symbol )
symbol {
keyword if
symbol (
identifier mask
symbol =
integerConstant 0
symbol )
symbol {
keyword return
integerConstant 1
symbol ;
symbol }
keyword else
symbol {
keyword return
identifier mask
symbol *
integerConstant 2
symbol ;
symbol }
symbol }
keyword function
keyword void
identifier fillMemory
symbol (
keyword int
identifier startAddress
symbol ,
keyword int
identifier length
symbol ,
keyword int
identifier value
symbol )
symbol {
keyword while
symbol (
identifier length
symbol >
integerConstant 0
symbol )
symbol {
keyword do
identifier Memory
symbol .
identifier poke
symbol (
identifier startAddress
symbol ,
identifier value
symbol )
symbol ;
keyword let
identifier length
symbol =
identifier length
symbol -
integerConstant 1
symbol ;
keyword let
identifier startAddress
symbol =
identifier startAddress
symbol +
integerConstant 1
symbol ;
symbol }
keyword return
symbol ;
symbol }
symbol }
