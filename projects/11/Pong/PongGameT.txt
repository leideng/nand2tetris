keyword class
identifier PongGame
symbol {
keyword static
identifier PongGame
identifier instance
symbol ;
keyword field
identifier Bat
identifier bat
symbol ;
keyword field
identifier Ball
identifier ball
symbol ;
keyword field
keyword int
identifier wall
symbol ;
keyword field
keyword boolean
identifier exit
symbol ;
keyword field
keyword int
identifier score
symbol ;
keyword field
keyword int
identifier lastWall
symbol ;
keyword field
keyword int
identifier batWidth
symbol ;
keyword constructor
identifier PongGame
identifier new
symbol (
symbol )
symbol {
keyword do
identifier Screen
symbol .
identifier clearScreen
symbol (
symbol )
symbol ;
keyword let
identifier batWidth
symbol =
integerConstant 50
symbol ;
keyword let
identifier bat
symbol =
identifier Bat
symbol .
identifier new
symbol (
integerConstant 230
symbol ,
integerConstant 229
symbol ,
identifier batWidth
symbol ,
integerConstant 7
symbol )
symbol ;
keyword let
identifier ball
symbol =
identifier Ball
symbol .
identifier new
symbol (
integerConstant 253
symbol ,
integerConstant 222
symbol ,
integerConstant 0
symbol ,
integerConstant 511
symbol ,
integerConstant 0
symbol ,
integerConstant 229
symbol )
symbol ;
keyword do
identifier ball
symbol .
identifier setDestination
symbol (
integerConstant 400
symbol ,
integerConstant 0
symbol )
symbol ;
keyword do
identifier Screen
symbol .
identifier drawRectangle
symbol (
integerConstant 0
symbol ,
integerConstant 238
symbol ,
integerConstant 511
symbol ,
integerConstant 240
symbol )
symbol ;
keyword do
identifier Output
symbol .
identifier moveCursor
symbol (
integerConstant 22
symbol ,
integerConstant 0
symbol )
symbol ;
keyword do
identifier Output
symbol .
identifier printString
symbol (
stringConstant Score: 0
symbol )
symbol ;
keyword let
identifier exit
symbol =
keyword false
symbol ;
keyword let
identifier score
symbol =
integerConstant 0
symbol ;
keyword let
identifier wall
symbol =
integerConstant 0
symbol ;
keyword let
identifier lastWall
symbol =
integerConstant 0
symbol ;
keyword return
keyword this
symbol ;
symbol }
keyword method
keyword void
identifier dispose
symbol (
symbol )
symbol {
keyword do
identifier bat
symbol .
identifier dispose
symbol (
symbol )
symbol ;
keyword do
identifier ball
symbol .
identifier dispose
symbol (
symbol )
symbol ;
keyword do
identifier Memory
symbol .
identifier deAlloc
symbol (
keyword this
symbol )
symbol ;
keyword return
symbol ;
symbol }
keyword function
keyword void
identifier newInstance
symbol (
symbol )
symbol {
keyword let
identifier instance
symbol =
identifier PongGame
symbol .
identifier new
symbol (
symbol )
symbol ;
keyword return
symbol ;
symbol }
keyword function
identifier PongGame
identifier getInstance
symbol (
symbol )
symbol {
keyword return
identifier instance
symbol ;
symbol }
keyword method
keyword void
identifier run
symbol (
symbol )
symbol {
keyword var
keyword char
identifier key
symbol ;
keyword while
symbol (
symbol ~
identifier exit
symbol )
symbol {
keyword while
symbol (
symbol (
identifier key
symbol =
integerConstant 0
symbol )
symbol &
symbol (
symbol ~
identifier exit
symbol )
symbol )
symbol {
keyword let
identifier key
symbol =
identifier Keyboard
symbol .
identifier keyPressed
symbol (
symbol )
symbol ;
keyword do
identifier bat
symbol .
identifier move
symbol (
symbol )
symbol ;
keyword do
identifier moveBall
symbol (
symbol )
symbol ;
symbol }
keyword if
symbol (
identifier key
symbol =
integerConstant 130
symbol )
symbol {
keyword do
identifier bat
symbol .
identifier setDirection
symbol (
integerConstant 1
symbol )
symbol ;
symbol }
keyword else
symbol {
keyword if
symbol (
identifier key
symbol =
integerConstant 132
symbol )
symbol {
keyword do
identifier bat
symbol .
identifier setDirection
symbol (
integerConstant 2
symbol )
symbol ;
symbol }
keyword else
symbol {
keyword if
symbol (
identifier key
symbol =
integerConstant 140
symbol )
symbol {
keyword let
identifier exit
symbol =
keyword true
symbol ;
symbol }
symbol }
symbol }
keyword while
symbol (
symbol (
symbol ~
symbol (
identifier key
symbol =
integerConstant 0
symbol )
symbol )
symbol &
symbol (
symbol ~
identifier exit
symbol )
symbol )
symbol {
keyword let
identifier key
symbol =
identifier Keyboard
symbol .
identifier keyPressed
symbol (
symbol )
symbol ;
keyword do
identifier bat
symbol .
identifier move
symbol (
symbol )
symbol ;
keyword do
identifier moveBall
symbol (
symbol )
symbol ;
symbol }
symbol }
keyword if
symbol (
identifier exit
symbol )
symbol {
keyword do
identifier Output
symbol .
identifier moveCursor
symbol (
integerConstant 10
symbol ,
integerConstant 27
symbol )
symbol ;
keyword do
identifier Output
symbol .
identifier printString
symbol (
stringConstant Game Over
symbol )
symbol ;
symbol }
keyword return
symbol ;
symbol }
keyword method
keyword void
identifier moveBall
symbol (
symbol )
symbol {
keyword var
keyword int
identifier bouncingDirection
symbol ,
identifier batLeft
symbol ,
identifier batRight
symbol ,
identifier ballLeft
symbol ,
identifier ballRight
symbol ;
keyword let
identifier wall
symbol =
identifier ball
symbol .
identifier move
symbol (
symbol )
symbol ;
keyword if
symbol (
symbol (
identifier wall
symbol >
integerConstant 0
symbol )
symbol &
symbol (
symbol ~
symbol (
identifier wall
symbol =
identifier lastWall
symbol )
symbol )
symbol )
symbol {
keyword let
identifier lastWall
symbol =
identifier wall
symbol ;
keyword let
identifier bouncingDirection
symbol =
integerConstant 0
symbol ;
keyword let
identifier batLeft
symbol =
identifier bat
symbol .
identifier getLeft
symbol (
symbol )
symbol ;
keyword let
identifier batRight
symbol =
identifier bat
symbol .
identifier getRight
symbol (
symbol )
symbol ;
keyword let
identifier ballLeft
symbol =
identifier ball
symbol .
identifier getLeft
symbol (
symbol )
symbol ;
keyword let
identifier ballRight
symbol =
identifier ball
symbol .
identifier getRight
symbol (
symbol )
symbol ;
keyword if
symbol (
identifier wall
symbol =
integerConstant 4
symbol )
symbol {
keyword let
identifier exit
symbol =
symbol (
identifier batLeft
symbol >
identifier ballRight
symbol )
symbol |
symbol (
identifier batRight
symbol <
identifier ballLeft
symbol )
symbol ;
keyword if
symbol (
symbol ~
identifier exit
symbol )
symbol {
keyword if
symbol (
identifier ballRight
symbol <
symbol (
identifier batLeft
symbol +
integerConstant 10
symbol )
symbol )
symbol {
keyword let
identifier bouncingDirection
symbol =
symbol -
integerConstant 1
symbol ;
symbol }
keyword else
symbol {
keyword if
symbol (
identifier ballLeft
symbol >
symbol (
identifier batRight
symbol -
integerConstant 10
symbol )
symbol )
symbol {
keyword let
identifier bouncingDirection
symbol =
integerConstant 1
symbol ;
symbol }
symbol }
keyword let
identifier batWidth
symbol =
identifier batWidth
symbol -
integerConstant 2
symbol ;
keyword do
identifier bat
symbol .
identifier setWidth
symbol (
identifier batWidth
symbol )
symbol ;
keyword let
identifier score
symbol =
identifier score
symbol +
integerConstant 1
symbol ;
keyword do
identifier Output
symbol .
identifier moveCursor
symbol (
integerConstant 22
symbol ,
integerConstant 7
symbol )
symbol ;
keyword do
identifier Output
symbol .
identifier printInt
symbol (
identifier score
symbol )
symbol ;
symbol }
symbol }
keyword do
identifier ball
symbol .
identifier bounce
symbol (
identifier bouncingDirection
symbol )
symbol ;
symbol }
keyword return
symbol ;
symbol }
symbol }
