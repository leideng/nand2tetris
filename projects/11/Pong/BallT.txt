keyword class
identifier Ball
symbol {
keyword field
keyword int
identifier x
symbol ,
identifier y
symbol ;
keyword field
keyword int
identifier lengthx
symbol ,
identifier lengthy
symbol ;
keyword field
keyword int
identifier d
symbol ,
identifier straightD
symbol ,
identifier diagonalD
symbol ;
keyword field
keyword boolean
identifier invert
symbol ,
identifier positivex
symbol ,
identifier positivey
symbol ;
keyword field
keyword int
identifier leftWall
symbol ,
identifier rightWall
symbol ,
identifier topWall
symbol ,
identifier bottomWall
symbol ;
keyword field
keyword int
identifier wall
symbol ;
keyword constructor
identifier Ball
identifier new
symbol (
keyword int
identifier Ax
symbol ,
keyword int
identifier Ay
symbol ,
keyword int
identifier AleftWall
symbol ,
keyword int
identifier ArightWall
symbol ,
keyword int
identifier AtopWall
symbol ,
keyword int
identifier AbottomWall
symbol )
symbol {
keyword let
identifier x
symbol =
identifier Ax
symbol ;
keyword let
identifier y
symbol =
identifier Ay
symbol ;
keyword let
identifier leftWall
symbol =
identifier AleftWall
symbol ;
keyword let
identifier rightWall
symbol =
identifier ArightWall
symbol -
integerConstant 6
symbol ;
keyword let
identifier topWall
symbol =
identifier AtopWall
symbol ;
keyword let
identifier bottomWall
symbol =
identifier AbottomWall
symbol -
integerConstant 6
symbol ;
keyword let
identifier wall
symbol =
integerConstant 0
symbol ;
keyword do
identifier show
symbol (
symbol )
symbol ;
keyword return
keyword this
symbol ;
symbol }
keyword method
keyword void
identifier dispose
symbol (
symbol )
symbol {
keyword do
identifier Memory
symbol .
identifier deAlloc
symbol (
keyword this
symbol )
symbol ;
keyword return
symbol ;
symbol }
keyword method
keyword void
identifier show
symbol (
symbol )
symbol {
keyword do
identifier Screen
symbol .
identifier setColor
symbol (
keyword true
symbol )
symbol ;
keyword do
identifier draw
symbol (
symbol )
symbol ;
keyword return
symbol ;
symbol }
keyword method
keyword void
identifier hide
symbol (
symbol )
symbol {
keyword do
identifier Screen
symbol .
identifier setColor
symbol (
keyword false
symbol )
symbol ;
keyword do
identifier draw
symbol (
symbol )
symbol ;
keyword return
symbol ;
symbol }
keyword method
keyword void
identifier draw
symbol (
symbol )
symbol {
keyword do
identifier Screen
symbol .
identifier drawRectangle
symbol (
identifier x
symbol ,
identifier y
symbol ,
identifier x
symbol +
integerConstant 5
symbol ,
identifier y
symbol +
integerConstant 5
symbol )
symbol ;
keyword return
symbol ;
symbol }
keyword method
keyword int
identifier getLeft
symbol (
symbol )
symbol {
keyword return
identifier x
symbol ;
symbol }
keyword method
keyword int
identifier getRight
symbol (
symbol )
symbol {
keyword return
identifier x
symbol +
integerConstant 5
symbol ;
symbol }
keyword method
keyword void
identifier setDestination
symbol (
keyword int
identifier destx
symbol ,
keyword int
identifier desty
symbol )
symbol {
keyword var
keyword int
identifier dx
symbol ,
identifier dy
symbol ,
identifier temp
symbol ;
keyword let
identifier lengthx
symbol =
identifier destx
symbol -
identifier x
symbol ;
keyword let
identifier lengthy
symbol =
identifier desty
symbol -
identifier y
symbol ;
keyword let
identifier dx
symbol =
identifier Math
symbol .
identifier abs
symbol (
identifier lengthx
symbol )
symbol ;
keyword let
identifier dy
symbol =
identifier Math
symbol .
identifier abs
symbol (
identifier lengthy
symbol )
symbol ;
keyword let
identifier invert
symbol =
symbol (
identifier dx
symbol <
identifier dy
symbol )
symbol ;
keyword if
symbol (
identifier invert
symbol )
symbol {
keyword let
identifier temp
symbol =
identifier dx
symbol ;
keyword let
identifier dx
symbol =
identifier dy
symbol ;
keyword let
identifier dy
symbol =
identifier temp
symbol ;
keyword let
identifier positivex
symbol =
symbol (
identifier y
symbol <
identifier desty
symbol )
symbol ;
keyword let
identifier positivey
symbol =
symbol (
identifier x
symbol <
identifier destx
symbol )
symbol ;
symbol }
keyword else
symbol {
keyword let
identifier positivex
symbol =
symbol (
identifier x
symbol <
identifier destx
symbol )
symbol ;
keyword let
identifier positivey
symbol =
symbol (
identifier y
symbol <
identifier desty
symbol )
symbol ;
symbol }
keyword let
identifier d
symbol =
symbol (
integerConstant 2
symbol *
identifier dy
symbol )
symbol -
identifier dx
symbol ;
keyword let
identifier straightD
symbol =
integerConstant 2
symbol *
identifier dy
symbol ;
keyword let
identifier diagonalD
symbol =
integerConstant 2
symbol *
symbol (
identifier dy
symbol -
identifier dx
symbol )
symbol ;
keyword return
symbol ;
symbol }
keyword method
keyword int
identifier move
symbol (
symbol )
symbol {
keyword do
identifier hide
symbol (
symbol )
symbol ;
keyword if
symbol (
identifier d
symbol <
integerConstant 0
symbol )
symbol {
keyword let
identifier d
symbol =
identifier d
symbol +
identifier straightD
symbol ;
symbol }
keyword else
symbol {
keyword let
identifier d
symbol =
identifier d
symbol +
identifier diagonalD
symbol ;
keyword if
symbol (
identifier positivey
symbol )
symbol {
keyword if
symbol (
identifier invert
symbol )
symbol {
keyword let
identifier x
symbol =
identifier x
symbol +
integerConstant 4
symbol ;
symbol }
keyword else
symbol {
keyword let
identifier y
symbol =
identifier y
symbol +
integerConstant 4
symbol ;
symbol }
symbol }
keyword else
symbol {
keyword if
symbol (
identifier invert
symbol )
symbol {
keyword let
identifier x
symbol =
identifier x
symbol -
integerConstant 4
symbol ;
symbol }
keyword else
symbol {
keyword let
identifier y
symbol =
identifier y
symbol -
integerConstant 4
symbol ;
symbol }
symbol }
symbol }
keyword if
symbol (
identifier positivex
symbol )
symbol {
keyword if
symbol (
identifier invert
symbol )
symbol {
keyword let
identifier y
symbol =
identifier y
symbol +
integerConstant 4
symbol ;
symbol }
keyword else
symbol {
keyword let
identifier x
symbol =
identifier x
symbol +
integerConstant 4
symbol ;
symbol }
symbol }
keyword else
symbol {
keyword if
symbol (
identifier invert
symbol )
symbol {
keyword let
identifier y
symbol =
identifier y
symbol -
integerConstant 4
symbol ;
symbol }
keyword else
symbol {
keyword let
identifier x
symbol =
identifier x
symbol -
integerConstant 4
symbol ;
symbol }
symbol }
keyword if
symbol (
symbol ~
symbol (
identifier x
symbol >
identifier leftWall
symbol )
symbol )
symbol {
keyword let
identifier wall
symbol =
integerConstant 1
symbol ;
keyword let
identifier x
symbol =
identifier leftWall
symbol ;
symbol }
keyword if
symbol (
symbol ~
symbol (
identifier x
symbol <
identifier rightWall
symbol )
symbol )
symbol {
keyword let
identifier wall
symbol =
integerConstant 2
symbol ;
keyword let
identifier x
symbol =
identifier rightWall
symbol ;
symbol }
keyword if
symbol (
symbol ~
symbol (
identifier y
symbol >
identifier topWall
symbol )
symbol )
symbol {
keyword let
identifier wall
symbol =
integerConstant 3
symbol ;
keyword let
identifier y
symbol =
identifier topWall
symbol ;
symbol }
keyword if
symbol (
symbol ~
symbol (
identifier y
symbol <
identifier bottomWall
symbol )
symbol )
symbol {
keyword let
identifier wall
symbol =
integerConstant 4
symbol ;
keyword let
identifier y
symbol =
identifier bottomWall
symbol ;
symbol }
keyword do
identifier show
symbol (
symbol )
symbol ;
keyword return
identifier wall
symbol ;
symbol }
keyword method
keyword void
identifier bounce
symbol (
keyword int
identifier bouncingDirection
symbol )
symbol {
keyword var
keyword int
identifier newx
symbol ,
identifier newy
symbol ,
identifier divLengthx
symbol ,
identifier divLengthy
symbol ,
identifier factor
symbol ;
keyword let
identifier divLengthx
symbol =
identifier lengthx
symbol /
integerConstant 10
symbol ;
keyword let
identifier divLengthy
symbol =
identifier lengthy
symbol /
integerConstant 10
symbol ;
keyword if
symbol (
identifier bouncingDirection
symbol =
integerConstant 0
symbol )
symbol {
keyword let
identifier factor
symbol =
integerConstant 10
symbol ;
symbol }
keyword else
symbol {
keyword if
symbol (
symbol (
symbol (
symbol ~
symbol (
identifier lengthx
symbol <
integerConstant 0
symbol )
symbol )
symbol &
symbol (
identifier bouncingDirection
symbol =
integerConstant 1
symbol )
symbol )
symbol |
symbol (
symbol (
identifier lengthx
symbol <
integerConstant 0
symbol )
symbol &
symbol (
identifier bouncingDirection
symbol =
symbol (
symbol -
integerConstant 1
symbol )
symbol )
symbol )
symbol )
symbol {
keyword let
identifier factor
symbol =
integerConstant 20
symbol ;
symbol }
keyword else
symbol {
keyword let
identifier factor
symbol =
integerConstant 5
symbol ;
symbol }
symbol }
keyword if
symbol (
identifier wall
symbol =
integerConstant 1
symbol )
symbol {
keyword let
identifier newx
symbol =
integerConstant 506
symbol ;
keyword let
identifier newy
symbol =
symbol (
identifier divLengthy
symbol *
symbol (
symbol -
integerConstant 50
symbol )
symbol )
symbol /
identifier divLengthx
symbol ;
keyword let
identifier newy
symbol =
identifier y
symbol +
symbol (
identifier newy
symbol *
identifier factor
symbol )
symbol ;
symbol }
keyword else
symbol {
keyword if
symbol (
identifier wall
symbol =
integerConstant 2
symbol )
symbol {
keyword let
identifier newx
symbol =
integerConstant 0
symbol ;
keyword let
identifier newy
symbol =
symbol (
identifier divLengthy
symbol *
integerConstant 50
symbol )
symbol /
identifier divLengthx
symbol ;
keyword let
identifier newy
symbol =
identifier y
symbol +
symbol (
identifier newy
symbol *
identifier factor
symbol )
symbol ;
symbol }
keyword else
symbol {
keyword if
symbol (
identifier wall
symbol =
integerConstant 3
symbol )
symbol {
keyword let
identifier newy
symbol =
integerConstant 250
symbol ;
keyword let
identifier newx
symbol =
symbol (
identifier divLengthx
symbol *
symbol (
symbol -
integerConstant 25
symbol )
symbol )
symbol /
identifier divLengthy
symbol ;
keyword let
identifier newx
symbol =
identifier x
symbol +
symbol (
identifier newx
symbol *
identifier factor
symbol )
symbol ;
symbol }
keyword else
symbol {
keyword let
identifier newy
symbol =
integerConstant 0
symbol ;
keyword let
identifier newx
symbol =
symbol (
identifier divLengthx
symbol *
integerConstant 25
symbol )
symbol /
identifier divLengthy
symbol ;
keyword let
identifier newx
symbol =
identifier x
symbol +
symbol (
identifier newx
symbol *
identifier factor
symbol )
symbol ;
symbol }
symbol }
symbol }
keyword do
identifier setDestination
symbol (
identifier newx
symbol ,
identifier newy
symbol )
symbol ;
keyword return
symbol ;
symbol }
symbol }
